@page "/hotel/rooms"
@inject ILocalStorageService localStorage
@inject IJSRuntime jsRuntime
@inject IHotelRoomService hotelRoomService

<EditForm Model="HomeModel" OnValidSubmit="SaveBookingInfo">
    <div class="mt-2 mx-2 px-0 px-md-2 mx-md-2">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-6 col-md-3">
                <div class="form-group ">
                    <label><strong> Check In Date </strong></label>
                    <InputDate min="@DateTime.Now.ToString("yyyy-MM-dd")" 
                            @bind-Value="HomeModel.StartDate" class="form-control date-right" />
                </div>
            </div>
            <div class="col-6 col-md-3">
                <div class="form-group">
                    <label><strong> Check Out Date </strong></label>
                    <input @bind="HomeModel.EndDate" disabled="disabled" 
                            readonly="readonly" type="date" class="form-control date-right" />
                </div>
            </div>
            <div class=" col-4 col-md-3">
                <div class="form-group">
                    <label><strong> No Of Nights </strong></label>
                    <select @bind="HomeModel.NoOfNights" class="form-control selected">
                        <option value="Select" selected disabled="disabled"> How Many Nights? </option>
                        @for (var i = 1; i <= 10; i++)
                        {
                            <option value="@i">@i</option>
                        }
                    </select>
                </div>
            </div>

            <div class="col-4 col-md-3">
                <div class="form-group" style="margin-top: 1.9rem !important;">

                    <input type="submit" value= "Update" 
                        class="btn btn-success btn-block form-control font-weight-bold" />

                </div>
            </div>
        </div>
    </div>
</EditForm>
@if (Rooms != null && Rooms.Any())
{

    <div class="mt-2 mb-3 mx-2 px-0 px-md-2 mx-md-2">
        @foreach (var room in Rooms)
        {
            <div class="rooms row p-2 mb-3" style="border-radius:20px; border: 1px solid #ffffff">
                <div class="col-12 col-lg-4 col-md-3">
                    <div id="carouselExampleIndicators_@room.Id" class="carousel slide pt-3" data-ride="carousel">
                        @{
                            int carouselIndicatorIndex = 0;
                            int carouselInnerIndex = 0;
                        }
                        <ol class="carousel-indicators">
                            @foreach (var image in room.RoomImages)
                            {
                                if (carouselIndicatorIndex == 0)
                                {
                                    <li data-target="#carouselExampleIndicators_@room.Id" 
                                        data-slide-to="@carouselIndicatorIndex" class="active"></li>
                                }
                                else
                                {
                                    <li data-target="#carouselExampleIndicators_@room.Id" 
                                        data-slide-to="@carouselIndicatorIndex"></li>
                                }
                                carouselIndicatorIndex++;
                            }

                        </ol>
                        <div class="carousel-inner m-0">
                            @foreach (var image in room.RoomImages)
                            {
                                if (carouselInnerIndex == 0)
                                {
                                    <div class="carousel-item active">
                                        <img style="border-radius: 20px; min-height: 200px"
                                            class="d-block w-100" src="@image.ImageUrl" alt="First slide">
                                    </div>
                                }
                                else
                                {
                                    <div class="carousel-item">
                                        <img style="border-radius:20px;min-height: 200px" 
                                            class="d-block w-100" src="@image.ImageUrl" alt="Second slide">
                                    </div>
                                }
                                carouselInnerIndex++;
                            }


                        </div>
                        <a class="carousel-control-prev" 
                                href="#carouselExampleIndicators_@room.Id" role="button" data-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="sr-only">Previous</span>
                        </a>
                        <a class="carousel-control-next"
                            href="#carouselExampleIndicators_@room.Id" role="button" data-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="sr-only">Next</span>
                        </a>
                    </div>
                </div>
                <div class="col-12 col-lg-8 col-md-9">
                    <div class="row pt-3">
                        <div class="col-12 col-lg-8">
                            <p class="card-title text-warning room-name" style="font-size:xx-large">@room.Name</p>
                            @if (!CultureInfo.CurrentCulture.TextInfo.IsRightToLeft)
                            {
                                <p class="card-text lead font-weight-bold">
                                    @((MarkupString)room.Details)
                                </p>
                            }

                            @if (CultureInfo.CurrentCulture.TextInfo.IsRightToLeft)
                            {
                                <p class="card-text lead font-weight-bold ar-room">
                                    @(room.ArDetails)
                                </p>
                            }

                        </div>
                        <div class="col-12 col-lg-4">

                            <div class="row pb-4">
                                <div class="col-12 ">
                                    <div class="float-right mt-2">
                                        <strong class="float-right">
                                            @localizer["Max Occupancy"]: @room.Occupancy @localizer["adults"]
                                        </strong><br />
                                        <strong class="room-area">@localizer["Room Size"] : @room.Area @localizer["m"]<sub style="vertical-align: super; font-size: small;">2</sub></strong><br />
                                        <h4 class="text-warning font-weight-bold pt-4"> @room.TotalAmount.ToString("0.00") <strong>@localizer["USD"]</strong></h4>
                                        <strong style="font-size:18px" class="float-right">@localizer["Cost for"] @room.TotalNights @localizer["nights"]</strong>
                                    </div>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-12 col-lg-11 offset-lg-1">
                                    @if (room.IsBooked)
                                    {
                                        <button disabled class="btn btn-secondary btn-block">@localizer["Booked Room"]</button>
                                    }
                                    else
                                    {
                                        <a href="@($"hotel/room-details/{room.Id}")" class="btn btn-outline-warning btn-block font-weight-bold">@localizer["Book"]</a>
                                    }
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

<div hidden="@IsHidden" class="text-center m-5 p-5">
    <h2>No Rooms Available</h2>
</div>
@if (IsLoading)
{
    <div style="position: fixed; margin-top: 7vh; left: 50%; margin-left: -130px;">
        <img src="images/Loading.gif" />
    </div>
}


@code {
    public HomeVM HomeModel { get; set; } = new HomeVM();
    public IEnumerable<HotelRoomDTO> Rooms { get; set; } = new List<HotelRoomDTO>();
    public bool IsHidden { get; set; } = true;
    public bool IsLoading { get; set; } = true;

    protected async override Task OnInitializedAsync()
    {
        try
        {
            if (await localStorage.GetItemAsync<HomeVM>(SD.Local_InitialBooking) != null)
            {
                HomeModel = await localStorage.GetItemAsync<HomeVM>(SD.Local_InitialBooking);
            }
            else
            {
                HomeModel.NoOfNights = 1;
            }
            await LoadRooms();
            IsLoading = false;
        }
        catch (Exception ex)
        {
            await jsRuntime.ToastrError(ex.Message);

        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InitializeCarousel();
            firstRender = false;
        }
    }

    private async Task LoadRooms()
    {
        Rooms = await hotelRoomService.GetHotelRooms(HomeModel.StartDate.ToString("MM/dd/yyyy", CultureInfo.InvariantCulture),
                                                     HomeModel.EndDate.ToString("MM/dd/yyyy", CultureInfo.InvariantCulture)
                                                     );
        if (Rooms == null) IsHidden = false;
        foreach (var room in Rooms)
        {
            room.TotalAmount = room.Price * HomeModel.NoOfNights;
            room.TotalNights = HomeModel.NoOfNights;
        }
    }

    private async Task SaveBookingInfo()
    {
        HomeModel.EndDate = HomeModel.StartDate.AddDays(HomeModel.NoOfNights);
        await localStorage.SetItemAsync(SD.Local_InitialBooking, HomeModel);
        await LoadRooms();

    }
}
