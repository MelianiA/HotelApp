@page "/hotel-amenity/create"
@page "/hotel-amenity/edit/{Id:int}"

@using Business.Repository.IRepository
@using DTOS
@inject IAmenityRepository AmenityRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@inject NavigationManager Navigation


<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@title Hotel Amenity</h3>

    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                @* First Keep On Submit then change to onValidSubmit *@
                <EditForm Model="@AmenityModel" OnValidSubmit="UpsertAmenity">
                    <DataAnnotationsValidator />
                    @*Show validation summary <ValidationSummary/>*@
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="AmenityModel.Name" class="form-control"></InputText>
                        <ValidationMessage For="()=>AmenityModel.Name"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Description</label>
                        <InputTextArea @bind-Value="AmenityModel.Description" class="form-control"></InputTextArea>
                        <ValidationMessage For="()=>AmenityModel.Description"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Timing</label>
                        <InputText @bind-Value="AmenityModel.Timing" class="form-control"></InputText>
                        <ValidationMessage For="()=>AmenityModel.Timing"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Icon Style</label>
                        <InputText @bind-Value="AmenityModel.IconStyle" class="form-control"></InputText>
                        <ValidationMessage For="()=>AmenityModel.IconStyle"></ValidationMessage>
                    </div>



                    <div class="form-group">
                        <button class="btn btn-primary"> @title Amenity </button>
                        <NavLink href="@($"hotel-amenity")" class="btn btn-secondary">Back</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>

</div>

@code
{
    [Parameter]
    public int? Id { get; set; }
    internal HotelAmenityDTO AmenityModel { get; set; } = new HotelAmenityDTO();
    internal string title { get; set; } = "Create";
    [CascadingParameter]
    protected Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        if (!authState.User.Identity.IsAuthenticated)
        {
            var uri = new Uri(Navigation.Uri);

            Navigation.NavigateTo($"/Identity/Account/Login?returnUrl={uri.LocalPath }");
        }

        if (Id != null)
        {
            //we work with update
            title = "Update";

            AmenityModel = await AmenityRepository.GetHotelAmenity(Id.Value);
        }
        else
        {
            AmenityModel = new HotelAmenityDTO();
        }
    }



    internal async Task UpsertAmenity()
    {
        try
        {
            bool isUnique = await AmenityRepository.IsAmenityUnique(AmenityModel.Name, AmenityModel.Id);
            if (!isUnique)
            {
                await jsRuntime.ToastrError("Amenity name already exist");
                return;
            }
            if (AmenityModel.Id != 0 && title == "Update")
            {
                //Update the hotel amenity here
                var updateAmenityResult = await AmenityRepository.UpdateHotelAmenity(AmenityModel.Id, AmenityModel);


                await jsRuntime.ToastrSuccess("Hotel Amenity updated successfully.");
            }
            else
            {

                //Create new Hotel Amenity here
                var createdResult = await AmenityRepository.CreateHotelAmenity(AmenityModel);
                AmenityModel = new HotelAmenityDTO();
                await jsRuntime.ToastrSuccess("Hotel amenity created successfully.");

            }
            NavigationManager.NavigateTo("hotel-amenity");


        }
        catch (Exception ex)
        {
            await jsRuntime.ToastrError(ex.Message);
        }
    }
 }