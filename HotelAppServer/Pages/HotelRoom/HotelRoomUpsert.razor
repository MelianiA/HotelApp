@page "/hotel-room/create"
@page "/hotel-room/edit/{Id:int}"
@using System.IO
@using DTOS
@using Business.Repository.IRepository
@inject IHotelRoomRepository HotelRoomRepository
@inject IRoomImageRepository RoomImageRepository
@inject NavigationManager Navigation
@inject IJSRuntime IJSRuntime
@inject IFileUpload FileUpload

<div class="row">
    <h3 class="card-title text-info">@title Hotel Room</h3>
    <div class="col-md-12">
        <div>
            <EditForm Model="RoomModel" OnValidSubmit="UpsertRoom">
                <DataAnnotationsValidator />
                @*<ValidationSummary />*@
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="RoomModel.Name" class="form-control"></InputText>
                    <ValidationMessage For="()=>RoomModel.Name" />
                </div>
                <div class="form-group">
                    <label>Occupancy</label>
                    <InputNumber @bind-Value="RoomModel.Occupancy" class="form-control"></InputNumber>
                    <ValidationMessage For="()=>RoomModel.Occupancy" />
                </div>
                <div class="form-group">
                    <label>Price</label>
                    <InputNumber @bind-Value="RoomModel.Price" class="form-control"></InputNumber>
                    <ValidationMessage For="()=>RoomModel.Price" />
                </div>
                <div class="form-group">
                    <label>Area</label>
                    <InputText @bind-Value="RoomModel.Area" class="form-control"></InputText>
                </div>
                <div class="form-group" style="height:200px">
                    <label>Details</label>
                    <BlazoredTextEditor @ref="@QuillHtml" Placeholder="Please enter room details">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                        </ToolbarContent>
                        <EditorContent>

                        </EditorContent>
                    </BlazoredTextEditor>
                </div>


                <div class="form-group" style="padding-top:75px">
                    <InputFile class="input" OnChange="UploadImage" multiple></InputFile>
                    <div class="row">
                        @if (ShowSpinner)
                        {
                            <div class="col-md-12">
                                <span>
                                    <i class="fas fa-spinner fa-pulse"></i>
                                    Please wait>> Images are uploading
                                </span>
                            </div>
                        }
                        @if (RoomModel.ImagesUrls != null && RoomModel.ImagesUrls.Count > 0)
                        {
                            int serial = 1;
                            foreach (var imageUrl in RoomModel.ImagesUrls)
                            {
                                <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6 mt-3">
                                    <img src="@imageUrl" class="room-image" />
                                    <span class="room-serial">@serial</span>
                                    <button type="button" @onclick="()=>DeleteImage(imageUrl)" class="btn btn-danger mt-1 room-delete">
                                        X
                                    </button>
                                </div>
                                serial++;
                            }
                        }
                    </div>
                </div>
                <div class="form-group">
                    <button class="btn btn-primary">@title Room</button>
                    <NavLink href="hotel-room" class="btn btn-secondary">Back</NavLink>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }
    public string title { get; set; } = "Create";
    public HotelRoomDTO RoomModel { get; set; } = new HotelRoomDTO();
    public RoomImageDTO RoomImage { get; set; } = new RoomImageDTO();
    public List<string> DeletedImagesUrls { get; set; } = new List<string>();
    public bool ShowSpinner { get; set; }

    public BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();

    [CascadingParameter]
    protected Task<AuthenticationState> AuthenticationState  { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        if (!authState.User.IsInRole(SD.Role_Admin))
        {
            var uri = new Uri(Navigation.Uri);

            Navigation.NavigateTo($"/Identity/Account/Login?returnUrl={uri.LocalPath }");
        }
        if (Id != null)
        {
            //Update room
            title = "Update";
            RoomModel = await HotelRoomRepository.GetHotelRoom(Id.Value);
            if (RoomModel?.RoomImages != null)
            {
                RoomModel.ImagesUrls = RoomModel.RoomImages.Select(ri => ri.ImageUrl).ToList();
            }
        }
        else
        {
            //Create room
            RoomModel = new HotelRoomDTO();
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        bool loading = true;
        while (loading)
        {
            try
            {
                if (!string.IsNullOrEmpty(RoomModel.Details))
                {
                    await QuillHtml.LoadHTMLContent(RoomModel.Details);

                }
                loading = false;
            }
            catch
            {
                await Task.Delay(10);
                loading = true;
            }
        }
    }

    private async Task UpsertRoom()
    {
        try
        {
            bool isUnique = await HotelRoomRepository.IsRoomUnique(RoomModel.Name, RoomModel.Id);
            if (!isUnique)
            {
                await IJSRuntime.ToastrError("Room name already exist");
                return;
            }

            if (RoomModel.Id != 0 && title == "Update")
            {
                //Update
                RoomModel.Details = await QuillHtml.GetHTML();
                var updatedRoom = await HotelRoomRepository.UpdateHotelRoom(RoomModel.Id, RoomModel);
                if (RoomModel.ImagesUrls != null)
                {
                    if (DeletedImagesUrls != null && DeletedImagesUrls.Any())
                    {
                        foreach (var DeletedImageUrl in DeletedImagesUrls)
                        {
                            var imageName = DeletedImageUrl.Replace($"{Navigation.BaseUri}RoomImages/", "");
                            var result = FileUpload.DeleteFile(imageName);
                            await RoomImageRepository.DeleteImageByImageUrl(DeletedImageUrl);

                        }
                    }
                    await AddRoomImage(updatedRoom);
                }
                Navigation.NavigateTo("hotel-room");
                await IJSRuntime.ToastrSuccess("room updated Successfully");
            }
            else
            {
                //Create
                RoomModel.Details = await QuillHtml.GetHTML();
                var createdRoom = await HotelRoomRepository.CreateHotelRoom(RoomModel);
                await AddRoomImage(createdRoom);
                Navigation.NavigateTo("hotel-room");
                await IJSRuntime.ToastrSuccess("room created Successfully");
            }
        }
        catch (Exception)
        {

            throw;
        }

    }

    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        ShowSpinner = true;
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles(16).Count > 0)
            {
                foreach (var file in e.GetMultipleFiles(16))
                {
                    FileInfo fileInfo = new FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadedImagePath = await FileUpload.UploadFile(file);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await IJSRuntime.ToastrError("Please select .jpg/.png/.jpeg file only");
                        return;
                    }

                }
                if (images.Any())
                {
                    if (RoomModel.ImagesUrls != null && RoomModel.ImagesUrls.Any())
                    {
                        RoomModel.ImagesUrls.AddRange(images);
                    }
                    else
                    {
                        RoomModel.ImagesUrls = new List<string>();
                        RoomModel.ImagesUrls.AddRange(images);
                    }
                }
                else
                {
                    await IJSRuntime.ToastrError("Image uploading failed");
                    return;
                }
            }
            ShowSpinner = false;
        }
        catch (Exception ex)
        {
            ShowSpinner = false;
            await IJSRuntime.ToastrError(ex.Message);
        }
    }
    private async Task AddRoomImage(HotelRoomDTO roomDetails)
    {
        if (RoomModel.ImagesUrls is not null)
        {
            foreach (var imageUrl in RoomModel.ImagesUrls)
            {
                if (RoomModel.RoomImages == null ||
                    RoomModel.RoomImages.Where(ri => ri.ImageUrl == imageUrl).Count() == 0)
                {
                    //Add new room image
                    RoomImage = new RoomImageDTO()
                        {
                            RoomId = roomDetails.Id,
                            ImageUrl = imageUrl
                        };
                    await RoomImageRepository.CreateRoomImage(RoomImage);
                }

            }
        }

    }
    private async Task DeleteImage(string imageUrl)
    {
        try
        {
            var imageIndex = RoomModel.ImagesUrls.FindIndex(x => x == imageUrl);
            var imageName = imageUrl.Replace($"{Navigation.BaseUri}RoomImages/", "");
            if (RoomModel.Id == 0 && title == "Create")
            {
                //Create
                var result = FileUpload.DeleteFile(imageName);
                if (result) await IJSRuntime.ToastrSuccess("Image deleted successfully");
            }
            else
            {
                //Update
                DeletedImagesUrls ??= new List<string>();
                DeletedImagesUrls.Add(imageUrl);
            }
            RoomModel.ImagesUrls.RemoveAt(imageIndex);

        }
        catch (Exception ex)
        {

            await IJSRuntime.ToastrError(ex.Message);
        }
    }
}
